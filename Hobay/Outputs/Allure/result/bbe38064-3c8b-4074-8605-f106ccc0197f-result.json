{"name": "test_1_buy_entity_goods[data0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-34b1abd4=\"\" class=\"r-server\">...</div> is not clickable at point (316, 785). Other element would receive the click: <div class=\"vc-switch\">...</div>\n  (Session info: chrome=85.0.4183.83)", "trace": "self = <Hobay.TestCases.Web.BuyGoods.test_.TestBuyGoods object at 0x00000210D0180730>\nweb_buy_goods = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a127629b37250bfc23c91d5e6c82f5ff\")>\ndata = {'goods_name': 'APP实物商品', 'payment_method': '易贝'}\n\n    @allure.story(\"购买实物商品\")\n    @pytest.mark.smoke\n    @pytest.mark.usefixtures(\"web_buy_goods\")\n    @pytest.mark.parametrize(\"data\", buy_entity_goods)\n    def test_1_buy_entity_goods(self, web_buy_goods, data):\n        doc = \"测试购买实物商品-\"\n        driver = web_buy_goods\n        with allure.step(\"首页点击搜索\"):\n            IndexPage(driver).search(text=doc)\n        with allure.step(\"输入商品名-点击第一个商品\"):\n            SearchGoodPage(driver).send_search(data['goods_name'], text=doc)\n        with allure.step(\"商品详情-下单\"):\n>           GoodDetailPage(driver).buy_good(text=doc)\n\ntest_.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\PageObjects\\Web\\GoodDetail\\GoodDetail_Page.py:80: in buy_good\n    self.buy_now(text=doc)\n..\\..\\..\\PageObjects\\Web\\GoodDetail\\GoodDetail_Page.py:53: in buy_now\n    self.click_element(GD.buy_now, doc=doc)\n..\\..\\..\\Common\\BasePage.py:120: in click_element\n    ele.click()\nD:\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nD:\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000210D0180CD0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CC7C24+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CC7BF4+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-34b1abd4=\"\" class=\"r-server\">...</div> is not clickable at point (316, 785). Other element would receive the click: <div class=\"vc-switch\">...</div>\nE         (Session info: chrome=85.0.4183.83)\n\nD:\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException"}, "steps": [{"name": "首页点击搜索", "status": "passed", "start": 1603159953127, "stop": 1603159955564}, {"name": "输入商品名-点击第一个商品", "status": "passed", "start": 1603159955564, "stop": 1603159956650}, {"name": "商品详情-下单", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-v-34b1abd4=\"\" class=\"r-server\">...</div> is not clickable at point (316, 785). Other element would receive the click: <div class=\"vc-switch\">...</div>\n  (Session info: chrome=85.0.4183.83)\n\n", "trace": "  File \"D:\\Pycharm_workspace\\Hobay\\TestCases\\Web\\BuyGoods\\test_.py\", line 36, in test_1_buy_entity_goods\n    GoodDetailPage(driver).buy_good(text=doc)\n  File \"D:\\Pycharm_workspace\\Hobay\\PageObjects\\Web\\GoodDetail\\GoodDetail_Page.py\", line 80, in buy_good\n    self.buy_now(text=doc)\n  File \"D:\\Pycharm_workspace\\Hobay\\PageObjects\\Web\\GoodDetail\\GoodDetail_Page.py\", line 53, in buy_now\n    self.click_element(GD.buy_now, doc=doc)\n  File \"D:\\Pycharm_workspace\\Hobay\\Common\\BasePage.py\", line 120, in click_element\n    ele.click()\n  File \"D:\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1603159956650, "stop": 1603159961427}], "attachments": [{"name": "log", "source": "1098aab4-0dd9-4d55-857a-86363b5ed488-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'goods_name': 'APP实物商品', 'payment_method': '易贝'}"}], "start": 1603159953126, "stop": 1603159961429, "uuid": "b9740027-d2dd-4bb7-a198-e5452e7d69c8", "historyId": "3dbeddef5288c58554ff7949817effcd", "fullName": "Web.BuyGoods.test_.TestBuyGoods#test_1_buy_entity_goods[data0]", "labels": [{"name": "story", "value": "购买实物商品"}, {"name": "feature", "value": "购买商品功能"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "Web.BuyGoods"}, {"name": "suite", "value": "test_"}, {"name": "subSuite", "value": "TestBuyGoods"}, {"name": "host", "value": "DESKTOP-4EMDDAT"}, {"name": "thread", "value": "5856-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Web.BuyGoods.test_"}]}